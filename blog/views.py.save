from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView, TemplateView
from .models import Post
from .forms import PostForm
from django.urls import reverse_lazy
from .forms import ContactForm

class PostListView(ListView):
    model = Post
    template_name = 'blog/post_list.html'
    context_object_name = 'posts'
    
    def get_queryset(self):
        if self.request.user.is_authenticated or self.request.user.is_admin():
            return Post.objects.all()
        return Post.objects.filter(published=True)
    
class PostDetailView(DetailView):
    model = Post
    template_name = 'blog/post_detail.html'
    
class PostCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):
    model = Post
    form_class = PostForm
    template_name = 'blog/post_form.html'
    
    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)
    
    def test_func(self):
       return self.request.user.is_author() or self.request.user.is_admin()

class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Post
    form_class = PostForm
    template_name = 'blog/post_form.html'
    
    def test_func(self):
        post = self.get_object()
        return self.request.user == post.author or self.request.user.is_admin()

class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Post
    template_name = 'blog/post_confirm_delete.html'
    success_url = reverse_lazy('post_list')
    
    def test_func(self):
        post = self.get_object()
        return self.request.user == post.author or self.request.user.is_admin()
    
class AboutView(TemplateView):
    template_name = 'blog/about.html'

class ContectView(TemplateView):
    template_name = 'blog/contact.html'
    form_class = ContactForm
    success_url ='/thanks/'

    def form_valid(self, form):
        form
        return super().form_valid(form)
    

@login_required
def toggle_publish(request, pk):
    post = get_object_or_404(Post, pk=pk)
    if request.user == post.author or request.user.is_admin():
        post.published = True
        post.save()
        return redirect('post_detail', pk=post.pk)
    return redirect('post_list')                
